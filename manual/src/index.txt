Prawn!!!!!!, The Manual
=======================

If you want to learn the basics of how to learn Prawn, or how to get hacking
on the internals, this guide might be for you.  If you like William Shatner, 
then this guide is *definitely* for you, but if you don't, we don't give a
Shatner what you think!

image:prawn.png[] 

Who doesn't like William Shatner?  If you're confused or frustrated by this
preface, please remember a date, and then forget about this manual and Prawn
for a while.  The date is June 15th, 2009.  This is when we expect Prawn to
be renamed PDF::Document and have its first production release.  Until then,
we're up to our ears in Shatner, bugs, and missing features.  Only those who
are willing to get the disgusting scent of uncooked fish on their hands are
welcome at this point.

== Getting Started ==

Prawn aims to be a fast and nimble PDF generator for Ruby.  The primary focus
is making low level PDF operations as easy as possible, rather than to 
provide every possible feature you might need for producing your document.  That
having been said, you might get pretty far with nothing more than the features 
Prawn implements.  Some of the highlights are:

  * Simple, fast table generation
  * Full UTF-8 Support on Ruby 1.8
  * Local and remote embedded images (PNG/JPG)
  * Support for certain PNG transparencies
  * Built-in fonts from Adobe
  * TrueType font embedding
  * Elementary drawing operations
  * Flowing text with automatic page breaking
  * Document Subsections via BoundingBox
  * Cool 'bounding box' concept that eliminates lots of coordinate math
  * Ability to use a background image as a template for your document

Before we go any further, here are a few things you can't do with Prawn:

  * Re-open an existing PDF and modify it.
  * Generate PDF Forms
  * Z-ordering of elements

There may be many more missing features, but these are the most common asked
about.  Though they may be possible at some point, none are on the critical
path to a 1.0 release.  

=== Installation ===

The 'easiest' way to install Prawn is via RubyGems:

  gem install prawn
  
However, if you" are using git for your projects, we recommend skipping the gem
install and instead registering Prawn as a submodule for your project.  Because
Prawn has no external dependencies footnote:[excluding developer dependencies], 
you can just check out the stable branch and be running code that is more
stable than the gem.  We won't go into details here, but you can find good
tutorials online for working with Git submodules with a simple google search.

The place to go to find the official git distribution of Prawn along with its
many forks is of course, Github:

  http://github.com/sandal/prawn
  
=== Hello World in Prawn ===

Let's start with a simple Hello World program, to verify Prawn is working,
and to give you a chance to write your first Prawn program.

Note that here and elsewhere, the necessary +require+ statements are omitted.
If you're using Rubygems, you'll need something like:

  require "rubygems"
  require "prawn"
  
And if you're vendoring Prawn, I assume you know what you're doing, but
it will look something like:

  $LOAD_PATH << "/path/to/prawn/lib"
  require "prawn"
  
Mentally replace this at the head of every example in this manual, and it
will save me some repetition.  Anyway, here's how you get Prawn to say hello:

------------------------------------------------------------------------------

  Prawn::Document.generate("hello.pdf") do
    text "Hello Prawn", :size => 24
  end

------------------------------------------------------------------------------

If this works correctly, your file will look something like this:

image::hello.png["Hello Example", scaledwidth="50%",align="center"]

If you prefer working with plain old objects, you could write the previous
example another way:

------------------------------------------------------------------------------

  pdf = Prawn::Document.new 
  pdf.text "Hello Prawn", :size => 24
  pdf.render_file("hello.pdf")

------------------------------------------------------------------------------

Most people tend to prefer the fancy block syntax for standalone scripts and
the more traditional object oriented approach when using Prawn inside another
application.  Feel free to pick the style that suits you best.  We'll be 
covering a whole lot more Prawn code in just a little while, but first, it's
worth explaining how releases work in Prawn so you can know what to expect.
Please read the following section carefully.

=== Prawn's Release Cycle ===

Prawn has a rolling release cycle that involves a split between stable and
developmental code.  All code in the stable branch as well as any gems 
released is considered 'stable', whereas everything else, especially Prawn's
master branch is considered to be in 'development'.

The convention we follow is simple, once you get the hang of it.  Whenever
we increment the tiny version number, you can expect the API to remain 
unchanged, with no significant new features.  These maintenance releases
almost entirely consist of bug fixes, cleanup, and documentation updates.

So this means when you see the version of Prawn go from +x.y.z+ to +x.y.z+1+,
you should be able to expect no breaking changes to the code.  That means you
can and should update your version of Prawn whenever a maintenance release is
pushed out, as this likely will result in less problems for you.

When we increment the minor version number however, you need to be sure to
check what has changed.  Until Prawn reaches 1.0 (and likely thereafter),
we make no promise to maintain API compatibility.  Of course, that having
been said, we will try not to change things without a good reason and we will
do what we can to clearly publish what changes are on the horizon so you can
start migrating your code.  However, if you report a bug because you updated
from +x.y.z+ to +x.y+1.z+ and didn't check for any API incompatible changes, 
you're likely to frustrate us.

Whenever a new major release of Prawn is about to happen, a final maintenance
release will be made from the stable branch if there are any outstanding 
patches.  Then, the current code in master will become the new stable, and
the process will repeat.

Old major releases are retired in Prawn, and not officially supported.  Of
course, by the time a release is retired, it will generally be pretty stable
and you can easily lock to a specific version if you need to.  The general
idea is that if you want the latest shiny features, you need to ride the wave
of changes present on the bleeding edge.  If you are a bit adventurous, this
is a great way to help out the project as it helps test code before it is
released.

Many users choose to run Prawn from edge, and our builds tend to be fairly
stable for the most part.  Of course, you're swimming at your own risk when
using unreleased code, so keep that in mind.

To help you plan out which versions of Prawn to develop against, here is
a rough timeline of the next few releases:

  0.4.0 | January 15th
  0.5.0 | February 15th
  0.6.0 | March 15th
  0.7.0 | April 15th
  0.8.0 | May 15th
  1.0.0 | June 15th (As PDF::Document)
  
If your project is a long term one, the best approach is to plan to work off 
of edge until you get close to completing your project, and then switch over
to stable from there on forward.

Of course, no matter what you do, it will pay to be informed.  We'll now go 
over a couple of the key community resources for Prawn to help keep you in 
the loop.

=== Community Resources ===

The best way to make the most out of your experience with Prawn is to get
involved.  Luckily, there are lots of ways to do that.  The links to the
bug trackers, mailing list, and API documentation call all be found at:

  http://prawn.majesticseacreature.com

If you'd like to chat in real time, feel free to catch us in #prawn at
irc.freenode.net.   Gregory Brown is <sandal>, James Healy is <yob>, and many
other regular contributors are also often lurking about.

One key aspect to remember about Prawn is that we try to keep our 
communications well organized.  Therefore, a post to the mailing list does
not constitute a bug report and the bug tracker is not a place for discussion.
Don't worry too much though, because if you put something in the wrong place,
we'll send a polite reminder of how things work best for us.

Prawn is blessed with a very active community full of bright folks who are
happy to help one another.  Please get involved!

=== Onward and Upward ===

We're about to walk through a number of key features in Prawn, describing
in some detail the things you'll need to know.  This manual isn't 
comprehensive by any means, but it should give you a solid foundation to
start from before perusing the API docs.

By now, you should have Prawn installed.  You should have also successfully
run the Hello World example, and possibly joined the mailing list or added
the project to your watch list on Github.  If you've got a working 
installation and have located all the essential resources, you're ready to
move on.  If not, please post a message to the mailing list and let us know
what problems you're having.

Assuming you're good to go, let's start with the basics and move up from
there.  By the end of this short manual, you'll be ready to produce some
pretty sweet PDFs, just wait and see.

== Working With Pages ==

Before we get into what you can generate with Prawn, we should talk a little bit
about the pages your content will be positioned on, and how to tweak them to fit
your needs.

=== Page Sizes and Orientation ===

Prawn defaults to portrait layout on US Letter paper, but that in no way limits
your options.  We can inspect the available paper sizes via irb:

------------------------------------------------------------------------------

  >> Prawn::Document::PageGeometry::SIZES.keys.sort
  => ["2A0", "4A0", "A0", "A1", "A10", "A2", "A3", "A4", "A5", "A6", "A7", "A8",
  "A9", "B0", "B1", "B10", "B2", "B3", "B4", "B5", "B6", "B7", "B8", "B9", "C0",
  "C1", "C10", "C2", "C3", "C4", "C5", "C6", "C7", "C8", "C9", "EXECUTIVE",
  "FOLIO", "LEGAL", "LETTER", "RA0", "RA1", "RA2", "RA3", "RA4", "SRA0", "SRA1",
  "SRA2", "SRA3", "SRA4", "TABLOID"]

------------------------------------------------------------------------------

You can specify these page sizes at document creation time:

--------------------------------------------------------------------------

  Prawn::Document.generate("page_sizes.pdf", :page_size => "A4") do
    text "Hello World"
  end

--------------------------------------------------------------------------

If you need to swap the orientation of the page from portrait to landscape, you
can do this as well via the +:page_layout+ option:

--------------------------------------------------------------------------

  options = { :page_size => "A4", :page_layout => :landscape }

  Prawn::Document.generate("page_sizes.pdf", options) do
    text "Hello World"
  end

--------------------------------------------------------------------------

You may need a page size that Prawn doesn't come with a preset value for.  In
this case, you can pass a width and height manually for your +:page_size+, as
seen here:

------------------------------------------------------------------------------

  Prawn::Document.generate("page_sizes.pdf", :page_size => [250,250]) do
    text "Hello World"
  end

------------------------------------------------------------------------------

This value always refers to the portrait layout of the document, the dimensions 
will be reversed automatically to produce a landscape layout when needed.  Both
width and height are given in PDF points, which are 1/72 of an inch.  In our
next example, I'll show an easier way to do these calculations, but its worth
knowing that all Prawn functions work in raw PDF points rather than some other
unit.

=== Margins ===

In addition to paper sizes and layouts, you may want to set the margins for
flowing content in your documents.  Prawn defaults to 0.5 inch margins around
the page, but you can override each of these as needed:


------------------------------------------------------------------------------
  
  require "prawn/measurement_extensions"

  options = { :left_margin   => 1.in, 
              :right_margin  => 1.in,
              :top_margin    => 2.in,
              :bottom_margin => 0.5.in }

  Prawn::Document.generate("page_margins.pdf", options) do
    text "Hello World " * 350
  end

------------------------------------------------------------------------------

As promised, the measurements here look a little clearer.  The
Prawn::Measurements module (which we will discuss a little bit later) includes an
optional require which extends the Numeric class with some shortcuts for
converting some common measurement units into PDF points.   Here, we've set our
left and right margins to one inch, our top margin to two inches, and our bottom
margin to half an inch.  There is no need to specify all of them if you don't
want to, each will retain its 0.5 inch default if it is not set.

An important thing to note about Prawn margins are that they are not very
strictly enforced.  Although flowing content will respect your margins, manually
positioned content or graphics primatives will not necessarily.  Prawn does not
crop content that is drawn outside of the margins, nor does it generate an error
when content is placed outside of them.  Instead, it is up to you to avoid these
issues in your code, with the help of +Document#margin_box+ to simplify your
calculations.  For example, if you wanted to draw a line from one side of the
page to the other regardless of the particular sizes of the margins, you could 
write:


------------------------------------------------------------------------------

  Prawn::Document.generate("margin_box.pdf") do
    stroke_line bounds.top_left, bounds.bottom_right
  end

------------------------------------------------------------------------------

=== Page Creation Details ===

New pages in prawn are created by Document#start_new_page.  This method is
called by default when a new document is created and is passed all the options
we've discussed here: +:left_margin+, +:right_margin+, +:top_margin+,
+:bottom_margin+, +:page_size+, and +:page_layout+.

You are not limited sticking with a particular page size and layout though.
Each new page can have its own set of these options:

------------------------------------------------------------------------------

  Prawn::Document.generate("page_creation.pdf") do
    text "First Page, with default settings"

    start_new_page(:layout => :landscape, :size => "A4")
    text "Now on a landscaped A4 page"
  end

------------------------------------------------------------------------------

Another potentially useful feature is that you can prevent Prawn from
immediately creating its first page.  This is often quite useful if you want to
generate pages in a loop and don't want to include special logic to check
whether it's the first or last page:

------------------------------------------------------------------------------

  Prawn::Document.generate("page_creation.pdf", :skip_page_creation => true) do
    10.times do |i|
      start_new_page
      text "Created page #{i}"
    end
  end

------------------------------------------------------------------------------

This pretty much covers all the core functionality around managing pages in
Prawn.  Before we get into actually working with content generation, we need to
cover just one more thing, and that is how elements are positioned on a page.
Because Prawn deviates a bit from some conventions, please be sure to read the
next section 

== Prawn's Coordinate System ==

Regardless of what you plan to use Prawn for, you will need to have a basic
understanding of how objects are positioned on the page.   If you have used
graphics drawing software of any sort, you might already have a basic idea of
how coordinate arithmetic works.  In some respects, Prawn will be similar to
other softwares you have worked with, in others, it will be quite different.
Prawn does not aim to be consistent with other systems speaking generally, but
you will find it to be internally consistent.  For this reason, once you learn
how Prawn works generally, that knowledge will apply throughout the system.

If you are looking for the reader's digest version, the core things to know
about Prawn are that the origin (0,0) is placed at the bottom left corner of the
page, and that all elements are anchored by their top-left corner.  If that's
enough to get you going, feel free to skip to the next section and come back
here if you get hung up down the line.  Otherwise, we'll run through a few more
examples to make things clear.

=== Positioning and Measurements ===

As mentioned in the previous section, Prawn uses a 0.5 inch margin by default
for all sides.  This means that if you don't manually change the margins, the
origin of the document will be at the bottom left corner of the page, a half
inch in and a half inch up.  To see what the boundaries look like, we can draw a
line:

------------------------------------------------------------------------------

  Prawn::Document.generate("coordinates.pdf") do
    stroke_line [0,0], [7.5 * 72, 10 * 72]
  end

------------------------------------------------------------------------------

The base units of measurement used are PDF points, of which there are 72 per
inch. So the code above essentially tells Prawn to draw a line from the bottom
left margin to the top right.  Of course, this could get tedious, so we can
include a module to make it more simple:

------------------------------------------------------------------------------

  include Prawn::Measurements
  
  Prawn::Document.generate("coordinates.pdf") do
    stroke_line [0,0], [in2pt(7.5), in2pt(10)] 
  end

-------------------------------------------------------------------------------

Using this approach is recommendable when you don't necessarily want to modify
the core library, because you can include the module without making the change
global if you wish.  However, we have an even more attractive approach if you
don't mind placing some unit of measure methods directly on Numeric.  We can
rewrite the preceding section like this:

-------------------------------------------------------------------------------

  require "prawn/measurement_extensions"

  Prawn::Document.generate("coordinates.pdf") do
    stroke_line [0,0], [7.5.in, 10.in] 
  end

-------------------------------------------------------------------------------

This is a separate require to avoid accidental naming clashes, as it is applied
globally.  You won't want to use it if other systems you are working with might
also be using a similar trick, but in standalone scripts, it might make your
code clearer to read.

Other units of measure are also available.  For a demonstration, take a look in
Prawn's source for +examples/general/measurement_units.rb+.  This will draw a
ruler on the page that shows the different units of measures available in Prawn.
You can also see the API documentation for +Prawn::Measurements+ for a
comprehensive list of units.

=== Rectangular Element Drawing ===

Now that we've gone over measurements and how to position particular points, we
should show the general format for drawing rectangular regions.  Most elements
are positioned by [x,y], width, and height in Prawn.  Here's a quick example of
drawing an actual rectangle graphic.  While looking at this code, keep in mind 
that other things such as image positioning will work in a similar way:

-------------------------------------------------------------------------------

  Prawn::Document.generate("coordinates.pdf") do
    stroke_rectangle [2.in, 5.in], 4.in, 2.in 
  end

-------------------------------------------------------------------------------

Here we've drawn a rectangle with a top left corner positioned two inches from
the left margin and 5.inches from the bottom margin.  It is 4 inches wide and 2
inches high.  While we're doing simple drawing operations, we might as well look
at some of the other graphics primatives Prawn has before moving on to other
things.

== Basic Graphics ==

Prawn supports most of the elementary drawing operations you might expect,
including circles, bezier curves, lines, rectangles and arbitrary polygons.
Prawn also has full color support, via a simple HTML/CSS based format.  Let's
take a look at these features in a little more detail.

=== Short Primer on Paths ===

PDF graphics bear a lot of similarities to turtle graphics.  When you draw
figures using PDF primatives, you are essentially moving a cursor around the
screen and then using it to draw paths.   These paths are then stroked, or
optionally, the region the enclose is filled in.  For this reason, we must
stroke or fill every line we draw, because if we do not, our document will be
full of invisible paths that were never actually 'painted'.

To make the turtle graphics analogy even more obvious, here's a simple example:

-------------------------------------------------------------------------------

  Prawn::Document.generate("paths.pdf") do
    stroke do
      text "1", :at => [4.in, 3.5.in]
      move_to [4.in, 4.in]

      text "2", :at => [5.in, 5.5.in]
      line_to [5.in, 6.in]

      text "3", :at => [3.in, 2.5.in]
      line_to [3.in, 3.in]

      text "4", :at => [5.in, 4.5.in]
      curve_to [5.in, 5.in], :bounds => [[1.in, 3.in], [6.in,6.in]]
    end
  end

-------------------------------------------------------------------------------

I've added some simple numering to show roughly where each segment of the path
is, and the order in which the figure is drawn.  As you can see, you can build a
path up from several sub-paths and then stroke the whole thing at once.

If we wanted to build this up as explicit individual paths, Prawn of course
provides the necessary tools:

-------------------------------------------------------------------------------

  Prawn::Document.generate("paths.pdf") do
    text "1", :at => [4.in, 3.5.in]
    text "2", :at => [5.in, 5.5.in]
    stroke_line [4.in, 4.in], [5.in, 6.in]

    text "3", :at => [3.in, 2.5.in]
    stroke_line [5.in, 6.in], [3.in, 3.in]

    text "4", :at => [5.in, 4.5.in]
    stroke_curve [3.in, 3.in], [5.in, 5.in], :bounds => [[1.in, 3.in], [6.in,6.in]]
  end

-------------------------------------------------------------------------------

Here we stroke each path separately.  This is not required, and we could have
used a single stroke operation as in the previous example, but this is meant to
show clearly that each is a distinct and separate path that does not rely on the
current drawing position to work.  Sometimes, this form will be preferred, other
times, the previous approach will be desireable.  Feel fre to choose the right
one to fit your tasks.

=== Drawing Shapes ===

Although lines, bezier curves, and rectangles are the only primitive drawings
PDF natively supports, Prawn of course implements some higher level features.

Here's a quick example of a few of them in action:

-------------------------------------------------------------------------------

  Prawn::Document.generate("shapes.pdf") do
    stroke do
      ellipse_at [200, 500], 1.in, 2.in 

      circle_at [400,400], :radius => 1.in
      vertical_line 400 - 1.in, 400 + 1.in, :at => 400

      polygon [100, 250], [200, 300], [300, 250],
              [300, 150], [200, 100], [100, 150]    
      horizontal_line 100, 300, :at => 250

      rectangle [75, 75], 25, 50
    end
  end

-------------------------------------------------------------------------------

Here we've drawn an ellipse, a circle, a rectangle, and a hexagon.  Because
Prawn doesn't have built in support for regular polygons other than the
rectangle, you can see that we build up our hexagon point by point.

In this example, I also snuck in vertical_line and horizontal_line, just to give
you a taste of a couple more line drawing methods available in Prawn

=== Stroke and Fill Colors ===

So far, we've been very boring.  We've used plain old black, and haven't filled
in any of our shapes. All that is about to change.

Before we get into setting actual colors, we need to go through the ways that
shapes can actually be painted onto your document.  In Prawn, there are three
methods that do this:  +stroke+, +fill+, and +fill_and_stroke+.  At the end of
the day, every time something is painted to the page, one of these three methods
are called.  However, Prawn gives you a lot of options.  All three of these
approaches will result in the same drawing.

==== Explicit call to stroke ====

-------------------------------------------------------------------------------

  Prawn::Document.generate("coordinates.pdf") do
    line bounds.top_left, bounds.bottom_right
    stroke
  end

-------------------------------------------------------------------------------


==== Block form ====

-------------------------------------------------------------------------------

  Prawn::Document.generate("coordinates.pdf") do
    stroke { line bounds.top_left, bounds.bottom_right }
  end

-------------------------------------------------------------------------------


==== Implicit form ====

-------------------------------------------------------------------------------

  Prawn::Document.generate("coordinates.pdf") do
    stroke_line bounds.top_left, bounds.bottom_right
  end

-------------------------------------------------------------------------------

Although we use +stroke+ here, the same general forms work for +fill+ and
+fill_and_stroke+ as well. The explicit form is most simple to understand.  This
just tells your PDF to stroke all paths that have not yet been stroked or
filled.   The block form is only marginally more exciting.  In fact, all it does
is execute the block and *then* call stroke.  The final implicit form is perhaps
a bit more interesting.  When you write +stroke_+ in front of any primitive
drawing operation (such as +line+ or +rectangle+), it executes that primitive
drawing operation and calls stroke afterwards.

Why so many options?  Mainly because the different approaches here each have
their merits in different situations.  If a particular one seems most appealing
to you, you're welcome to use it throughout your application.  However, if
you're keen on mixing and matching as the situation demands, that's fine too.

Once you understand how to actually call these methods, tweaking the colors they
use is easy.   Here's an example that should be enough to get you going:

-------------------------------------------------------------------------------

  Prawn::Document.generate("colors.pdf") do
    fill_color "0000ff"
    stroke_color "ff0000"

    line_width 3

    fill do
      ellipse_at [200, 500], 1.in, 2.in 

      circle_at [400,400], :radius => 1.in
    end


    stroke do
      vertical_line 400 - 1.in, 400 + 1.in, :at => 400

      polygon [100, 250], [200, 300], [300, 250],
              [300, 150], [200, 100], [100, 150]   
    end

    fill_and_stroke do
      horizontal_line 100, 300, :at => 250

      rectangle [75, 75], 25, 50
    end
  end

-------------------------------------------------------------------------------

If you run this example, you should gain a pretty clear sense of what +fill+,
+stroke+, and +fill_and_stroke+ do respectively.  Colors are represented as RGB
hex strings, or as CMYK.  Although we did not cover every last detail of
Prawn::Graphics and Prawn::Graphics::Color, both are well documented in the API,
so be sure to study those if your needs go beyond what was described here.

Now, we'll move away from primitive drawing operations to something a bit more
high level.  It's now time to talk about text generation and Prawn's support for
embedded fonts. If you are using Prawn for purely graphical operations, you
might skip to the bounding boxes chapter, but otherwise, what follows will be a
key chapter for anyone using Prawn to produce text documents.

== Text Generation ==

If you're working with Prawn, it's likely that you have a need for generating
text documents.  In this chapter, we'll go over enough details about Prawn's
text rendering and font embedding capabilities to get you going. 

Before we get into working with fonts and basic styling, we'll cover how to 
actually put text on the page, starting with the most simple technique and
moving upwards from there.

=== Absolute Text Positioning ===

The most fundamentally simple way to render text in Prawn is to place it at an
exact location.  When you do this, Prawn assumes you are rendering a single line
of text that will fit within the boundaries.  

We already saw this feature used in earlier examples, but let's take a look at 
it in a little more detail.

-------------------------------------------------------------------------------

  Prawn::Document.generate("absolute_text.pdf") do
    text "The rain in Spain falls mainly on the plains", :at => [50,100]
    stroke_horizontal_line 0, bounds.right, :at => 100
    stroke_vertical_line 0, bounds.top, :at => 50
  end   

-------------------------------------------------------------------------------

When you look at how the text is positioned relative to the lines, you can see
that when absolutely positioning text in Prawn, it is vertically positioned by
the baseline and horizontally positioned by the left edge of the first glyph.
You can see that this remains true even when you tweak the text size:

-------------------------------------------------------------------------------

  Prawn::Document.generate("absolute_text.pdf") do
    phrase = "The rain in Spain falls mainly on the plains"

    text phrase, :at => [50,100], :size => 24
    stroke_horizontal_line 0, bounds.right, :at => 100
    stroke_vertical_line 0, bounds.top, :at => 50
  end   

-------------------------------------------------------------------------------

Using +text()+ with the +:at+ option for absolute text positioning is most
appropriate when you need a whole lot of control over where your text is being
placed, or if you want to build up custom text rendering systems that behave
differently than what's already available in Prawn.   However, if you want Prawn
to do the work of positioning, wrapping, and advancing text for you, you can leave 
out the +:at+ option.

=== Automatic Text Flowing ===

If you are rendering some paragraphs or other structured bodies of text, you
might find it convenient to let Prawn handle flowing your text for you.  The
most basic example of this is to simply pass +text()+ a string to display.

-------------------------------------------------------------------------------

  Prawn::Document.generate("wrapping.pdf") do
    text "The rain in Spain falls mainly on the plains " * 500
  end  

-------------------------------------------------------------------------------

This text will be split up at the margin using a naive wrapping algorithm.  You
can specify an alignment for your text as well:

-------------------------------------------------------------------------------

  Prawn::Document.generate("wrapping.pdf") do
    text "The rain in Spain falls mainly on the plains " * 500, :align => :center
  end   

-------------------------------------------------------------------------------

Some text cannot meaningfully be split by whitespace, and instead, needs to be
wrapped by character.  You can enable this by using the +:wrap+ parameter.

-------------------------------------------------------------------------------

  Prawn::Document.generate("wrapping.pdf") do
    phrase = "The rain in Spain falls mainly on the plains " * 500
    text phrase, :wrap => :character
  end   

-------------------------------------------------------------------------------


Though the text here is English, this will most commonly be used with languages
which do not use spaces between words, such as Chinese.  Although this may not
be an optimal formatting solution, it may work good enough for your needs.  

But now that we've covered how to put text on the page, we can now discuss fonts
and styling a bit. We won't go into a great level of detail, but we'll
give you enough information to get you off the ground.

== Working With Fonts ==

Prawn supports two types of fonts. The first is the standard Adobe fonts
specified by the PDF format, which include the following:

  Times−Roman
  Times−Bold
  Times−Italic
  Times−BoldItalic
  Helvetica
  Helvetica−Bold
  Helvetica−Oblique
  Helvetica−BoldOblique
  Courier
  Courier−Bold
  Courier−Oblique
  Courier−BoldOblique
  Symbol
  ZapfDingbats

These fonts are built in, so you don't need to provide a font file for
embedding.  However, it is important to keep in mind that although all text
input must be in UTF-8, these built in fonts only contain glyphs for characters
found in the WinAnsi character set.  If you have a need for non-latin glyphs,
you'll need to use TrueType fonts instead.

Prawn has full support for TTF fonts, as a more flexible alternative to the
built in Adobe fonts.  The drawback is that you actually need to provide a TTF
file for Prawn to embed.   Although Prawn ships with a couple TTF files, we
intend for these to be used mainly for demonstration purposes, and therefore do
not provide a comprehensive set of typefaces for general use.  The benefit of
using a TTF is that so long as the font is unicode aware and has the glyphs you
need to render, Prawn will have no trouble producing your text.

=== Selecting Your Font ===

By default, Prawn will use Helvetica at size 12.  If you want to use another
font, you'll need to specify it.  For built in fonts, this is as easy as
referring to them by name.  Here's a little example that summarizes most of the
basics:

------------------------------------------------------------------------------

  Prawn::Document.generate("fonts.pdf") do
    text "A cheer for Helvetica"
    
    font "Courier"
    text "A Couri-yay for Courier"
    
    font "Times-Bold", :size => 8
    text "A little greeting to bold times"
    
    font "Helvetica"
    text "Back to the old grind (at 12pt!)"

    font "Times-Bold"
    text "Still at 8 point here"
  end   

------------------------------------------------------------------------------

If we were to use TTF fonts instead, we need to specify a path to the file,
either absolute or relative to the current working directory.  You'll often see
us reference some of the files included with Prawn for demonstration purposes
this way:

------------------------------------------------------------------------------

  Prawn::Document.generate("fonts.pdf") do
    font "#{Prawn::BASEDIR}/data/fonts/DejaVuSans.ttf"
    text "Hi there"
  end   

------------------------------------------------------------------------------

Though this is pretty simple stuff, there are a few things you might want to
make a note of when using +font()+.  The first is that font names are case
sensitive.  If you use "courier" instead of "Courier", Prawn will become sad
with you.  Furthermore, when using TTF fonts, your font name must end in the
.ttf extension, otherwise Prawn will not detect it as a valid font.

The other thing to notice is that current font size is stored by font in Prawn.
The default size for all fonts is 12, but when we change it in the way shown
previously, it affects things globally for that particular font.  If you run the
example, you'll see that the Courier and Helvetica text is rendered at 12 point,
but the Times-Bold is rendered at 8 point even without explictly specifying it
the second time around.

If we want to do things in a non-global way, it is possible to do so.  

------------------------------------------------------------------------------

  Prawn::Document.generate("fonts.pdf") do
    font "Courier" do
      font.size(20) do
        text "Some fixed width text with a nice big font"
      end
    end

    text "Some 12 point Helvetica here"

    font "Courier" do
      text "Some 12 point courier here"
    end
  end   

------------------------------------------------------------------------------

Note we needed to set the font size in a special way here.  Future versions of
Prawn will roll back the :size option when passed to +font()+, but this workaround
is currently needed.

Of course, +font.size+ is useful even within a single font face.  Like +font()+,
you can use it both globally and transactionally:

------------------------------------------------------------------------------

  Prawn::Document.generate("fonts.pdf") do
    text "Helvetica 12"

    font.size(16) do
      text "Helvetica 16"
      text "Helvetica 32", :size => 32
    end

    text "Helvetica 12"

    font.size = 40

    text "Helvetica 40"
  end   

------------------------------------------------------------------------------

Since there a lot of different use cases here, Prawn provides a lot of ways to
work with font sizes.  Feel free to choose the ones that seem most well suited
to your needs.

=== Font Families and Styling ===

Setting typefaces and font sizes isn't all you can do in Prawn.  You can also
group several fonts together to form a family, simplifying some styling tasks.
Though this support is fairly basic in Prawn 0.3, it is currently being improved 
and is worth knowing about even in its limited capability.

Prawn automatically groups the built-in fonts into families.  This means you can
specify the base name of a family and get all of its styles:

------------------------------------------------------------------------------

  Prawn::Document.generate("fonts.pdf") do
    %w[Helvetica Courier Times-Roman].each do |name|
      [:normal, :bold, :italic, :bold_italic].each do |s|   
        font name
        text "Hello World", :style => s
      end
    end
  end   

------------------------------------------------------------------------------

You can do this globally via +font()+, or per string with +text()+. If you are
okay with using the built in fonts, this is all you need to know.  However, if
you want to make use of TTF fonts, you'll need to know how to register a family
manually.

Luckily, this is quite easy to do.  We literally just match up style names with
font files.

------------------------------------------------------------------------------

  Prawn::Document.generate("fonts.pdf") do
    font_families.update(
     "MyTrueTypeFamily" => { :bold        => "foo-bold.ttf",
                             :italic      => "foo-italic.ttf",
                             :bold_italic => "foo-bold-italic.ttf",
                             :normal      => "foo.ttf" })


    font("MyTrueTypeFamily")
    text "Some bold text", :style => :bold
    text "Some normal text"
  end

------------------------------------------------------------------------------

It's also worth mentioning that style names are entirely based on convention.
If you want to create a style named +:happy_kitten_puppies+, it'd work fine.
However, by using +:normal+, +:bold+, +:italic+, and +:bold_italic+, you might
be able to take advantage of some assumptions made by Prawn in other
places.

== Spans and Bounding Boxes ==

Not Blank

== Table Generation ==

Not Blank

== Working With Images ==

Not Blank

== Common Mistakes ==

Not Blank

== Hacking Guide ==

Not Blank

== Acknowledgments ==

Prawn was originally made possible due to donations from the community to
Gregory Brown's Ruby Mendicant project.  Now, it is developed and maintained
by an active group of contributors and testers from all over the world.  You
can see exactly who did what by examining the git log, the Prawn mailing list,
and our bug tracker.   Special thanks go out to James Healy and Michael Daines
who assisted with much of the initial development of the project.  Jamis Buck
recently joined the team and is working on a lot of the problems we've been
avoiding for a while, including text formatting. Finally, thhe official Prawn 
logo was created by Richard Mason. 

Though I didn't mention many people by name, so many have been instrumental
in making Prawn's development move along so quickly.  You know who you are,
and I thank you for your contributions.

'This manual was written by Gregory Brown, 
author of Ruby Best Practices ( http://rubybestpractices.com )'
